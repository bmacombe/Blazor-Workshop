@page "/"
@using BlazorWrokshop.Data


Customers:
<TestComponent Customers="Customers"
               SelectedCustomer ="SelectedCustomer"
               CustomerSelectEvent="CustomerSelected"
               AddCustomerEvent="CustomerAdding"
               CustomerResetEvent="CustomerResetting"
               UpdateCustomerEvent="CustomerUpdating"
               DeleteCustomerEvent="CustomerDeleting">
</TestComponent>


<span style="color:@MessageColor;">@DisplayMessage</span>


@code {

    string DisplayMessage = "";
    string MessageColor = "green";

    List<Customer> Customers = new List<Customer>();


    Customer SelectedCustomer;


    void CustomerSelected(Customer customer)
    {
        SelectedCustomer = customer;
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Customers = await CustomerService.GetAllCustomers();
        }
        catch (Exception ex)
        {
            MessageColor = "red";
            DisplayMessage = "Could not get customer data";
        }
    }

    async Task CustomerResetting(int CustomerId)
    {
        try
        {
            var originalCustomer = await CustomerService.GetCustomer(CustomerId);
            if (originalCustomer != null)
            {
    // replace the customer and reset the SelectedCustomer
                Customers[Customers.FindIndex(
                    x => x.CustomerId == CustomerId)] = originalCustomer;
                SelectedCustomer = originalCustomer;
                MessageColor = "green";
                DisplayMessage = "Customer restored";

            }
            else
            {
                MessageColor = "red";
                DisplayMessage = "Could not load existing customer";
            }
        }
        catch (Exception ex)
        {
            MessageColor = "red";
            DisplayMessage = "Could not reset customer";
        }
    }

    async Task CustomerAdding(Customer Customer)
    {
        try
        {
            var highest = Customers.OrderByDescending(i => i.CustomerId).Take(1).First();
            Customer.CustomerId = highest.CustomerId + 1;
            await CustomerService.AddCustomer(Customer);
            SelectedCustomer = Customer;
            Customers = await CustomerService.GetAllCustomers();
            MessageColor = "green";
            DisplayMessage = "Customer added";
        }
        catch (Exception ex)
        {
            MessageColor = "red";
            DisplayMessage = "Could not add customer";
        }
    }

    async Task CustomerUpdating(Customer Customer)
    {
        try
        {
            await CustomerService.UpdateCustomer(Customer);
            Customers = await CustomerService.GetAllCustomers();
            MessageColor = "green";
            DisplayMessage = "Customer updated";
        }
        catch (Exception ex)
        {
            MessageColor = "red";
            DisplayMessage = "Could not update customer";
        }
    }

    async Task CustomerDeleting(int CustomerId)
    {
        try
        {
            await CustomerService.DeleteCustomer(CustomerId);
            Customers = await CustomerService.GetAllCustomers();
            if (Customers.Count > 0)
            {
                SelectedCustomer = Customers.First();
            }
            MessageColor = "green";
            DisplayMessage = "Customer deleted";
        }
        catch (Exception ex)
        {
            MessageColor = "red";
            DisplayMessage = "Could not delete customer";
        }
    }
}